public class LINKEDLIST {
    public static class Node{
        int data;
        Node next;
        public Node(int data){
            this.data=data;
            this.next=null;
        }
    }
    public static Node head;
    public static Node tail;
    public static int size;                    //calc directly, no need of loop

    public static void addFirst(int data){           //O(1)
        Node newNode=new Node(data);
        size++;
        if(head==null){
            head=tail=newNode;
            return;
        }
        newNode.next=head;
        head=newNode;
    }

    public static void addLast(int data){
        Node newNode= new Node(data);
        size++;
        if(head==null){
            head=tail=newNode;
            return;
        }
        tail.next=newNode;
        tail=newNode;
    }

    public void printList(){                    //O(n)
        Node temp=head;
        if(head==null){
            System.out.println("ll is empty");
            return;
        }
        while(temp!=null){
            System.out.print(temp.data+"->");
            temp=temp.next;
        }
        System.out.println("null");
    }

    public void addMiddle(int data,int idx){    //O(n)              //1 2 3 4 5
        if(idx==0){
            addFirst(data);
            return;
        }
        size++;
        Node newNode= new Node(data);
        Node temp=head;
        int i=0;
        while (i<idx-1){
            temp=temp.next;
            i++;
        }
        newNode.next=temp.next;
        temp.next=newNode;
    }

    public int removeFirst(){
        if(size==0){
            System.out.println("ll is empty");
            return Integer.MIN_VALUE;
        } else if (size==1) {
            int val= head.data;
            head=tail=null;
            size=0;
            return val;
        }
        int val=head.data;
        head=head.next;
        size--;
        return val;
    }

    public int removeLast(){
        if(size==0) {
            System.out.println("ll is empty");
            return Integer.MIN_VALUE;
        } else if (size==1) {
            int val= head.data;
            head=tail=null;
            size=0;
            return val;
        }   
        int val= tail.data;
        Node temp=head;
        while(temp.next!=tail){
            temp=temp.next;
        }
        temp.next=null;
        tail=temp;
        size--;
        return val;
    }

    public void removeNthNodeFromEnd(int n){    //flipkart qualcomm
        //from start=(size-n+1)th
        int size=0;
        Node temp=head;
        while(temp!=null){      //size calculation
            temp=temp.next;
            size++;
        }
        if(n==size){
            head=head.next;
            return;
        }
        int i=1;
        Node prev=head;
        while(i<size-n){
            prev=prev.next;
            i++;
        }
        prev.next=prev.next.next;
    }

    public int search(int data){
        Node temp=head;
        int i=0;
        while(temp!=null){
            if(temp.data==data){
                return i;
            }
            temp=temp.next;
            i++;
        }
        return -1;
    }

    public int helper(Node head,int key){
        if(head==null)
            return -1;
        if(head.data==key)
            return 0;
        int idx=helper(head.next,key);
        if(idx==-1)
            return -1;
        return idx+1;
    }

    public int recSearch(int key){
        return helper(head,key);
    }

    public void reverse(){
        Node prev= null;
        Node curr=tail=head;
        Node next;
        while(curr!=null){
            next=curr.next;
            curr.next=prev;
            prev=curr;
            curr=next;
        }
        head=prev;
    }

    public Node findMid(Node head){             //slow-fast approach
        Node slow=head;
        Node fast=head;
        while(fast!=null && fast.next!=null){    //even &&  odd
            slow=slow.next;
            fast=fast.next.next;
        }
        return slow;
    }

    public  boolean palindrome(){
        if(head==null || head.next==null){
            return true;
        }
        //step1: find mid
        Node mid=findMid(head);
        //step 2: reverse 2 half
        Node prev= null;
        Node curr=mid;
        while(curr!=null){
            Node next=curr.next;
            curr.next=prev;
            prev=curr;
            curr=next;
        }
        Node right=prev;
        Node left=head;
        //step 3: check if left half==right half
        while(right!=null){
            if(left.data!=right.data){
                return false;
            }
            left=left.next;
            right=right.next;
        }
        return true;
    }

    public static boolean loopDetect(){
        Node slow=head;
        Node fast=head;
        while(fast!=null && fast.next!=null){
            slow=slow.next;
            fast=fast.next.next;
            if(slow==fast)  return true;
        }
        return false;
    }

    public static void removeLoop() {
        //detect loop
        Node slow = head;
        Node fast = head;
        boolean loop = false;
        while (fast != null && fast.next != null) {
            slow = slow.next;
            fast = fast.next.next;
            if (slow == fast) {
                loop = true;
                break;
            }
        }
        if (loop == false) return;
        //find meeting point
        slow=head;
        Node prev=null;
        while(slow!=fast){
            prev=fast;
            slow=slow.next;
            fast=fast.next;
        }
        //remove loop
        prev.next=null;
    }

    public static Node mergeSort(Node head){
        if(head==null || head.next==null){
            return head;
        }
        Node mid=getMid(head);
        Node h2=mid.next;
        mid.next=null;
        Node left=mergeSort(head);
        Node right=mergeSort(h2);
        return merge(left,right);
    }

    private static Node merge(Node left, Node right){
        Node merge= new Node(-1);
        Node temp=merge;
        while(left!=null && right!=null){
            if(left.data<=right.data){
                temp.next=left;
                temp=temp.next;
                left=left.next;
            }
            else{
                temp.next=right;
                temp=temp.next;
                right=right.next;
            }
        }
        while (left!=null){
            temp.next=left;
            temp=temp.next;
            left=left.next;
        }
        while (right!=null){
            temp.next=right;
            temp=temp.next;
            right=right.next;
        }
        return merge.next;
    }

    private static Node getMid(Node head){
        Node slow=head;
        Node fast=head.next;
        while(fast!=null && fast.next!=null){
            slow=slow.next;
            fast=fast.next.next;
        }
        return slow;
    }

    public static void  zigzag(Node head){
        //get mid
        Node slow=head;
        Node fast=head.next;
        while(fast!=null && fast.next!=null){
            slow=slow.next;
            fast=fast.next.next;
        }
        Node mid=slow;

        //reverse second half
        Node prev=null;
        Node h2=mid.next;
        Node curr=h2;
        Node next;
        while(curr!=null){
            next=curr.next;
            curr.next=prev;
            prev=curr;
            next=curr;
        }
        h2=prev;

        //alternate merging
        Node leftHalf=head;
        Node rightHalf=h2;
        Node lnext,rnext;
        while(leftHalf!=null & rightHalf!=null){
            lnext=leftHalf.next;
            leftHalf.next=rightHalf;
            rnext=rightHalf.next;
            rightHalf.next=lnext;
            leftHalf=lnext;
            rightHalf=rnext;
        }
    }

    public static void main(String[] args){
        LINKEDLIST ll=new LINKEDLIST();
        ll.addLast(5);
        ll.addLast(4);
        ll.addLast(3);
        ll.addLast(2);
        ll.printList();
        ll.head=mergeSort(ll.head);
        ll.printList();
       // System.out.println(ll.palindrome());*/
       // ll.reverse();
       // ll.removeNthNodeFromEnd(3);
       // ll.printList();
       // System.out.println(size);
       // ll.removeFirst();
       // ll.removeLast();
       // ll.printList();
      // System.out.println( ll.recSearch(0));
       /* head=new Node(1);
        Node temp=new Node(2);
        head.next=temp;
        head.next.next=new Node(3);
        head.next.next.next=temp;

        System.out.println(loopDetect());
        removeLoop();
        System.out.println(loopDetect());*/
    }
}
